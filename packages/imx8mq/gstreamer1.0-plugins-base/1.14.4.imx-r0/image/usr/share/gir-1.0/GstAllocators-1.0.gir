<?xml version="1.0"?>
<!-- This file was automatically generated from C sources - DO NOT EDIT!
To affect the contents of this file, edit the original C definitions,
and/or use gtk-doc annotations.  -->
<repository version="1.2"
            xmlns="http://www.gtk.org/introspection/core/1.0"
            xmlns:c="http://www.gtk.org/introspection/c/1.0"
            xmlns:glib="http://www.gtk.org/introspection/glib/1.0">
  <include name="Gst" version="1.0"/>
  <package name="gstreamer-allocators-1.0"/>
  <c:include name="gst/allocators/allocators.h"/>
  <namespace name="GstAllocators"
             version="1.0"
             shared-library="libgstallocators-1.0.so.0"
             c:identifier-prefixes="Gst"
             c:symbol-prefixes="gst">
    <constant name="ALLOCATOR_DMABUF"
              value="dmabuf"
              c:type="GST_ALLOCATOR_DMABUF">
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="ALLOCATOR_FD" value="fd" c:type="GST_ALLOCATOR_FD">
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="ALLOCATOR_ION" value="ionmem" c:type="GST_ALLOCATOR_ION">
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <class name="AllocatorPhyMem"
           c:symbol-prefix="allocator_phymem"
           c:type="GstAllocatorPhyMem"
           parent="Gst.Allocator"
           glib:type-name="GstAllocatorPhyMem"
           glib:get-type="gst_allocator_phymem_get_type"
           glib:type-struct="AllocatorPhyMemClass">
      <implements name="PhysMemoryAllocator"/>
      <virtual-method name="alloc_phymem" introspectable="0">
        <return-value transfer-ownership="none">
          <type name="gint" c:type="int"/>
        </return-value>
        <parameters>
          <instance-parameter name="allocator" transfer-ownership="none">
            <type name="AllocatorPhyMem" c:type="GstAllocatorPhyMem*"/>
          </instance-parameter>
          <parameter name="phy_mem" transfer-ownership="none">
            <type c:type="PhyMemBlock*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="copy_phymem" introspectable="0">
        <return-value transfer-ownership="none">
          <type name="gint" c:type="int"/>
        </return-value>
        <parameters>
          <instance-parameter name="allocator" transfer-ownership="none">
            <type name="AllocatorPhyMem" c:type="GstAllocatorPhyMem*"/>
          </instance-parameter>
          <parameter name="det_mem" transfer-ownership="none">
            <type c:type="PhyMemBlock*"/>
          </parameter>
          <parameter name="src_mem" transfer-ownership="none">
            <type c:type="PhyMemBlock*"/>
          </parameter>
          <parameter name="offset" transfer-ownership="none">
            <type name="guint" c:type="guint"/>
          </parameter>
          <parameter name="size" transfer-ownership="none">
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="free_phymem" introspectable="0">
        <return-value transfer-ownership="none">
          <type name="gint" c:type="int"/>
        </return-value>
        <parameters>
          <instance-parameter name="allocator" transfer-ownership="none">
            <type name="AllocatorPhyMem" c:type="GstAllocatorPhyMem*"/>
          </instance-parameter>
          <parameter name="phy_mem" transfer-ownership="none">
            <type c:type="PhyMemBlock*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <field name="parent">
        <type name="Gst.Allocator" c:type="GstAllocator"/>
      </field>
    </class>
    <record name="AllocatorPhyMemClass"
            c:type="GstAllocatorPhyMemClass"
            glib:is-gtype-struct-for="AllocatorPhyMem">
      <field name="parent_class">
        <type name="Gst.AllocatorClass" c:type="GstAllocatorClass"/>
      </field>
      <field name="alloc_phymem" introspectable="0">
        <callback name="alloc_phymem" introspectable="0">
          <return-value transfer-ownership="none">
            <type name="gint" c:type="int"/>
          </return-value>
          <parameters>
            <parameter name="allocator" transfer-ownership="none">
              <type name="AllocatorPhyMem" c:type="GstAllocatorPhyMem*"/>
            </parameter>
            <parameter name="phy_mem" transfer-ownership="none">
              <type c:type="PhyMemBlock*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="free_phymem" introspectable="0">
        <callback name="free_phymem" introspectable="0">
          <return-value transfer-ownership="none">
            <type name="gint" c:type="int"/>
          </return-value>
          <parameters>
            <parameter name="allocator" transfer-ownership="none">
              <type name="AllocatorPhyMem" c:type="GstAllocatorPhyMem*"/>
            </parameter>
            <parameter name="phy_mem" transfer-ownership="none">
              <type c:type="PhyMemBlock*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="copy_phymem" introspectable="0">
        <callback name="copy_phymem" introspectable="0">
          <return-value transfer-ownership="none">
            <type name="gint" c:type="int"/>
          </return-value>
          <parameters>
            <parameter name="allocator" transfer-ownership="none">
              <type name="AllocatorPhyMem" c:type="GstAllocatorPhyMem*"/>
            </parameter>
            <parameter name="det_mem" transfer-ownership="none">
              <type c:type="PhyMemBlock*"/>
            </parameter>
            <parameter name="src_mem" transfer-ownership="none">
              <type c:type="PhyMemBlock*"/>
            </parameter>
            <parameter name="offset" transfer-ownership="none">
              <type name="guint" c:type="guint"/>
            </parameter>
            <parameter name="size" transfer-ownership="none">
              <type name="guint" c:type="guint"/>
            </parameter>
          </parameters>
        </callback>
      </field>
    </record>
    <constant name="CAPS_FEATURE_MEMORY_DMABUF"
              value="memory:DMABuf"
              c:type="GST_CAPS_FEATURE_MEMORY_DMABUF"
              version="1.12">
      <doc xml:space="preserve">Constant that defines the caps feature name for DMA buffer sharing.

It has to be used for non-mappable dma-buf only, i.e. when the underlying
memory is not mappable to user space. Or when the mapped memory contains
non meaningful data. It can be the case for protected content or when the
user wants explicitly avoid any software post processing.

In these cases all elements between the exported and the importer has to work
in passthrough mode. This is done by adding this caps feature.

When the memory is mappable for read and write requests then it is assumes
to be a fast path and so this caps feature should not be used. Though
according to the dma-buf protocal, while it is mapped it prevents the
exporter to migrate the buffer.

This caps feature should not serve at all the purpose of selecting the
@GST_ALLOCATOR_DMABUF allocator during caps negotiation.
When the exporter is the upstream element from the importer point of view,
the exporter should try to map the dma buffer at runtime (preferrably during
decide_allocation phase). When it succeeds for #GST_MAP_READWRITE this caps
feature should not be used. This allows scalers, color converts and any image
processing filters to work directly on the dma buffer.
In this case the importer element should check all incomming memory using
gst_is_dmabuf_memory().</doc>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <class name="DmaBufAllocator"
           c:symbol-prefix="dmabuf_allocator"
           c:type="GstDmaBufAllocator"
           version="1.12"
           parent="FdAllocator"
           glib:type-name="GstDmaBufAllocator"
           glib:get-type="gst_dmabuf_allocator_get_type"
           glib:type-struct="DmaBufAllocatorClass">
      <doc xml:space="preserve">Base class for allocators with dmabuf-backed memory</doc>
      <constructor name="new"
                   c:identifier="gst_dmabuf_allocator_new"
                   version="1.2">
        <doc xml:space="preserve">Return a new dmabuf allocator.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">a new dmabuf allocator, or NULL if the allocator
   isn't available. Use gst_object_unref() to release the allocator after
   usage</doc>
          <type name="Gst.Allocator" c:type="GstAllocator*"/>
        </return-value>
      </constructor>
      <function name="alloc"
                c:identifier="gst_dmabuf_allocator_alloc"
                version="1.2">
        <doc xml:space="preserve">Return a %GstMemory that wraps a dmabuf file descriptor.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">a GstMemory based on @allocator.
When the buffer will be released dmabuf allocator will close the @fd.
The memory is only mmapped on gst_buffer_mmap() request.</doc>
          <type name="Gst.Memory" c:type="GstMemory*"/>
        </return-value>
        <parameters>
          <parameter name="allocator" transfer-ownership="none">
            <doc xml:space="preserve">allocator to be used for this memory</doc>
            <type name="Gst.Allocator" c:type="GstAllocator*"/>
          </parameter>
          <parameter name="fd" transfer-ownership="none">
            <doc xml:space="preserve">dmabuf file descriptor</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
          <parameter name="size" transfer-ownership="none">
            <doc xml:space="preserve">memory size</doc>
            <type name="gsize" c:type="gsize"/>
          </parameter>
        </parameters>
      </function>
      <field name="parent">
        <type name="FdAllocator" c:type="GstFdAllocator"/>
      </field>
      <field name="_gst_reserved" readable="0" private="1">
        <array zero-terminated="0" c:type="gpointer" fixed-size="4">
          <type name="gpointer" c:type="gpointer"/>
        </array>
      </field>
    </class>
    <record name="DmaBufAllocatorClass"
            c:type="GstDmaBufAllocatorClass"
            glib:is-gtype-struct-for="DmaBufAllocator">
      <field name="parent_class">
        <type name="FdAllocatorClass" c:type="GstFdAllocatorClass"/>
      </field>
      <field name="_gst_reserved" readable="0" private="1">
        <array zero-terminated="0" c:type="gpointer" fixed-size="4">
          <type name="gpointer" c:type="gpointer"/>
        </array>
      </field>
    </record>
    <record name="DmabufMeta" c:type="GstDmabufMeta">
      <doc xml:space="preserve">#GstDmabufMeta carries metadata that goes along with
dmabuf memory in the buffer, like drm modifier.</doc>
      <field name="parent" writable="1">
        <doc xml:space="preserve">the parent #GstMeta</doc>
        <type name="Gst.Meta" c:type="GstMeta"/>
      </field>
      <field name="drm_modifier" writable="1">
        <type name="guint64" c:type="guint64"/>
      </field>
      <function name="get_info" c:identifier="gst_dmabuf_meta_get_info">
        <return-value transfer-ownership="none">
          <type name="Gst.MetaInfo" c:type="const GstMetaInfo*"/>
        </return-value>
      </function>
    </record>
    <class name="FdAllocator"
           c:symbol-prefix="fd_allocator"
           c:type="GstFdAllocator"
           version="1.6"
           parent="Gst.Allocator"
           glib:type-name="GstFdAllocator"
           glib:get-type="gst_fd_allocator_get_type"
           glib:type-struct="FdAllocatorClass">
      <doc xml:space="preserve">Base class for allocators with fd-backed memory</doc>
      <constructor name="new"
                   c:identifier="gst_fd_allocator_new"
                   version="1.6">
        <doc xml:space="preserve">Return a new fd allocator.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">a new fd allocator, or NULL if the allocator
   isn't available. Use gst_object_unref() to release the allocator after
   usage</doc>
          <type name="Gst.Allocator" c:type="GstAllocator*"/>
        </return-value>
      </constructor>
      <function name="alloc"
                c:identifier="gst_fd_allocator_alloc"
                version="1.6">
        <doc xml:space="preserve">Return a %GstMemory that wraps a generic file descriptor.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">a GstMemory based on @allocator.
When the buffer will be released the allocator will close the @fd unless
the %GST_FD_MEMORY_FLAG_DONT_CLOSE flag is specified.
The memory is only mmapped on gst_buffer_mmap() request.</doc>
          <type name="Gst.Memory" c:type="GstMemory*"/>
        </return-value>
        <parameters>
          <parameter name="allocator" transfer-ownership="none">
            <doc xml:space="preserve">allocator to be used for this memory</doc>
            <type name="Gst.Allocator" c:type="GstAllocator*"/>
          </parameter>
          <parameter name="fd" transfer-ownership="none">
            <doc xml:space="preserve">file descriptor</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
          <parameter name="size" transfer-ownership="none">
            <doc xml:space="preserve">memory size</doc>
            <type name="gsize" c:type="gsize"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve">extra #GstFdMemoryFlags</doc>
            <type name="FdMemoryFlags" c:type="GstFdMemoryFlags"/>
          </parameter>
        </parameters>
      </function>
      <field name="parent">
        <type name="Gst.Allocator" c:type="GstAllocator"/>
      </field>
    </class>
    <record name="FdAllocatorClass"
            c:type="GstFdAllocatorClass"
            glib:is-gtype-struct-for="FdAllocator">
      <field name="parent_class">
        <type name="Gst.AllocatorClass" c:type="GstAllocatorClass"/>
      </field>
    </record>
    <bitfield name="FdMemoryFlags" version="1.6" c:type="GstFdMemoryFlags">
      <doc xml:space="preserve">Various flags to control the operation of the fd backed memory.</doc>
      <member name="none" value="0" c:identifier="GST_FD_MEMORY_FLAG_NONE">
        <doc xml:space="preserve">no flag</doc>
      </member>
      <member name="keep_mapped"
              value="1"
              c:identifier="GST_FD_MEMORY_FLAG_KEEP_MAPPED">
        <doc xml:space="preserve">once the memory is mapped,
       keep it mapped until the memory is destroyed.</doc>
      </member>
      <member name="map_private"
              value="2"
              c:identifier="GST_FD_MEMORY_FLAG_MAP_PRIVATE">
        <doc xml:space="preserve">do a private mapping instead of
       the default shared mapping.</doc>
      </member>
      <member name="dont_close"
              value="4"
              c:identifier="GST_FD_MEMORY_FLAG_DONT_CLOSE">
        <doc xml:space="preserve">don't close the file descriptor when
       the memory is freed. Since: 1.10</doc>
      </member>
    </bitfield>
    <class name="IONAllocator"
           c:symbol-prefix="ion_allocator"
           c:type="GstIONAllocator"
           parent="DmaBufAllocator"
           glib:type-name="GstIONAllocator"
           glib:get-type="gst_ion_allocator_get_type"
           glib:type-struct="IONAllocatorClass">
      <implements name="PhysMemoryAllocator"/>
      <function name="obtain"
                c:identifier="gst_ion_allocator_obtain"
                introspectable="0">
        <return-value>
          <type name="Gst.Allocator" c:type="GstAllocator*"/>
        </return-value>
      </function>
      <property name="flags" writable="1" transfer-ownership="none">
        <type name="guint" c:type="guint"/>
      </property>
      <property name="heap-id" writable="1" transfer-ownership="none">
        <type name="guint" c:type="guint"/>
      </property>
      <field name="parent">
        <type name="DmaBufAllocator" c:type="GstDmaBufAllocator"/>
      </field>
      <field name="fd">
        <type name="gint" c:type="gint"/>
      </field>
      <field name="heap_id">
        <type name="guint" c:type="guint"/>
      </field>
      <field name="flags">
        <type name="guint" c:type="guint"/>
      </field>
    </class>
    <record name="IONAllocatorClass"
            c:type="GstIONAllocatorClass"
            glib:is-gtype-struct-for="IONAllocator">
      <field name="parent">
        <type name="DmaBufAllocatorClass" c:type="GstDmaBufAllocatorClass"/>
      </field>
    </record>
    <record name="IONMemory" c:type="GstIONMemory" disguised="1">
    </record>
    <record name="PhyMemMeta" c:type="GstPhyMemMeta">
      <field name="meta" writable="1">
        <type name="Gst.Meta" c:type="GstMeta"/>
      </field>
      <field name="x_padding" writable="1">
        <type name="guint" c:type="guint"/>
      </field>
      <field name="y_padding" writable="1">
        <type name="guint" c:type="guint"/>
      </field>
      <field name="rfc_luma_offset" writable="1">
        <type name="guint" c:type="guint"/>
      </field>
      <field name="rfc_chroma_offset" writable="1">
        <type name="guint" c:type="guint"/>
      </field>
      <function name="get_info"
                c:identifier="gst_phy_mem_meta_get_info"
                introspectable="0">
        <return-value>
          <type name="Gst.MetaInfo" c:type="GstMetaInfo*"/>
        </return-value>
      </function>
    </record>
    <interface name="PhysMemoryAllocator"
               c:symbol-prefix="phys_memory_allocator"
               c:type="GstPhysMemoryAllocator"
               glib:type-name="GstPhysMemoryAllocator"
               glib:get-type="gst_phys_memory_allocator_get_type"
               glib:type-struct="PhysMemoryAllocatorInterface">
      <prerequisite name="Gst.Allocator"/>
      <virtual-method name="get_phys_addr">
        <return-value transfer-ownership="none">
          <type name="guintptr" c:type="guintptr"/>
        </return-value>
        <parameters>
          <instance-parameter name="allocator" transfer-ownership="none">
            <type name="PhysMemoryAllocator" c:type="GstPhysMemoryAllocator*"/>
          </instance-parameter>
          <parameter name="mem" transfer-ownership="none">
            <type name="Gst.Memory" c:type="GstMemory*"/>
          </parameter>
        </parameters>
      </virtual-method>
    </interface>
    <record name="PhysMemoryAllocatorInterface"
            c:type="GstPhysMemoryAllocatorInterface"
            glib:is-gtype-struct-for="PhysMemoryAllocator"
            version="1.14">
      <doc xml:space="preserve">Marker interface for allocators with physical address backed memory</doc>
      <field name="parent_iface">
        <type name="GObject.TypeInterface" c:type="GTypeInterface"/>
      </field>
      <field name="get_phys_addr">
        <callback name="get_phys_addr">
          <return-value transfer-ownership="none">
            <type name="guintptr" c:type="guintptr"/>
          </return-value>
          <parameters>
            <parameter name="allocator" transfer-ownership="none">
              <type name="PhysMemoryAllocator"
                    c:type="GstPhysMemoryAllocator*"/>
            </parameter>
            <parameter name="mem" transfer-ownership="none">
              <type name="Gst.Memory" c:type="GstMemory*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
    </record>
    <function name="buffer_add_dmabuf_meta"
              c:identifier="gst_buffer_add_dmabuf_meta"
              version="1.12">
      <return-value transfer-ownership="none">
        <doc xml:space="preserve">the #GstDmabufMeta added to #GstBuffer</doc>
        <type name="DmabufMeta" c:type="GstDmabufMeta*"/>
      </return-value>
      <parameters>
        <parameter name="buffer" transfer-ownership="none">
          <doc xml:space="preserve">a #GstBuffer</doc>
          <type name="Gst.Buffer" c:type="GstBuffer*"/>
        </parameter>
        <parameter name="drm_modifier" transfer-ownership="none">
          <type name="guint64" c:type="guint64"/>
        </parameter>
      </parameters>
    </function>
    <function name="buffer_is_phymem" c:identifier="gst_buffer_is_phymem">
      <return-value transfer-ownership="none">
        <type name="gboolean" c:type="gboolean"/>
      </return-value>
      <parameters>
        <parameter name="buffer" transfer-ownership="none">
          <type name="Gst.Buffer" c:type="GstBuffer*"/>
        </parameter>
      </parameters>
    </function>
    <function name="buffer_query_phymem_block"
              c:identifier="gst_buffer_query_phymem_block"
              introspectable="0">
      <return-value>
        <type c:type="PhyMemBlock*"/>
      </return-value>
      <parameters>
        <parameter name="buffer" transfer-ownership="none">
          <type name="Gst.Buffer" c:type="GstBuffer*"/>
        </parameter>
      </parameters>
    </function>
    <function name="dmabuf_memory_get_fd"
              c:identifier="gst_dmabuf_memory_get_fd"
              version="1.2">
      <doc xml:space="preserve">Return the file descriptor associated with @mem.</doc>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve">the file descriptor associated with the memory, or -1.  The file
    descriptor is still owned by the GstMemory.  Use dup to take a copy
    if you intend to use it beyond the lifetime of this GstMemory.</doc>
        <type name="gint" c:type="gint"/>
      </return-value>
      <parameters>
        <parameter name="mem" transfer-ownership="none">
          <doc xml:space="preserve">the memory to get the file descriptor</doc>
          <type name="Gst.Memory" c:type="GstMemory*"/>
        </parameter>
      </parameters>
    </function>
    <function name="dmabuf_meta_api_get_type"
              c:identifier="gst_dmabuf_meta_api_get_type">
      <return-value transfer-ownership="none">
        <type name="GType" c:type="GType"/>
      </return-value>
    </function>
    <function name="dmabuf_meta_get_info"
              c:identifier="gst_dmabuf_meta_get_info"
              moved-to="DmabufMeta.get_info">
      <return-value transfer-ownership="none">
        <type name="Gst.MetaInfo" c:type="const GstMetaInfo*"/>
      </return-value>
    </function>
    <function name="fd_memory_get_fd"
              c:identifier="gst_fd_memory_get_fd"
              version="1.6">
      <doc xml:space="preserve">Get the fd from @mem. Call gst_is_fd_memory() to check if @mem has
an fd.</doc>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve">the fd of @mem or -1 when there is no fd on @mem</doc>
        <type name="gint" c:type="gint"/>
      </return-value>
      <parameters>
        <parameter name="mem" transfer-ownership="none">
          <doc xml:space="preserve">#GstMemory</doc>
          <type name="Gst.Memory" c:type="GstMemory*"/>
        </parameter>
      </parameters>
    </function>
    <function name="is_dmabuf_memory"
              c:identifier="gst_is_dmabuf_memory"
              version="1.2">
      <doc xml:space="preserve">Check if @mem is dmabuf memory.</doc>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve">%TRUE if @mem is dmabuf memory, otherwise %FALSE</doc>
        <type name="gboolean" c:type="gboolean"/>
      </return-value>
      <parameters>
        <parameter name="mem" transfer-ownership="none">
          <doc xml:space="preserve">the memory to be check</doc>
          <type name="Gst.Memory" c:type="GstMemory*"/>
        </parameter>
      </parameters>
    </function>
    <function name="is_fd_memory"
              c:identifier="gst_is_fd_memory"
              version="1.6">
      <doc xml:space="preserve">Check if @mem is memory backed by an fd</doc>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve">%TRUE when @mem has an fd that can be retrieved with
gst_fd_memory_get_fd().</doc>
        <type name="gboolean" c:type="gboolean"/>
      </return-value>
      <parameters>
        <parameter name="mem" transfer-ownership="none">
          <doc xml:space="preserve">#GstMemory</doc>
          <type name="Gst.Memory" c:type="GstMemory*"/>
        </parameter>
      </parameters>
    </function>
    <function name="is_phys_memory"
              c:identifier="gst_is_phys_memory"
              version="1.14">
      <return-value transfer-ownership="none">
        <doc xml:space="preserve">whether the memory at @mem is backed by physical memory</doc>
        <type name="gboolean" c:type="gboolean"/>
      </return-value>
      <parameters>
        <parameter name="mem" transfer-ownership="none">
          <doc xml:space="preserve">a #GstMemory</doc>
          <type name="Gst.Memory" c:type="GstMemory*"/>
        </parameter>
      </parameters>
    </function>
    <function name="memory_query_phymem_block"
              c:identifier="gst_memory_query_phymem_block"
              introspectable="0">
      <return-value>
        <type c:type="PhyMemBlock*"/>
      </return-value>
      <parameters>
        <parameter name="mem" transfer-ownership="none">
          <type name="Gst.Memory" c:type="GstMemory*"/>
        </parameter>
      </parameters>
    </function>
    <function name="phy_mem_meta_api_get_type"
              c:identifier="gst_phy_mem_meta_api_get_type">
      <return-value transfer-ownership="none">
        <type name="GType" c:type="GType"/>
      </return-value>
    </function>
    <function name="phys_memory_get_phys_addr"
              c:identifier="gst_phys_memory_get_phys_addr"
              version="1.14">
      <return-value transfer-ownership="none">
        <doc xml:space="preserve">Physical memory address that is backing @mem, or 0 if none</doc>
        <type name="guintptr" c:type="guintptr"/>
      </return-value>
      <parameters>
        <parameter name="mem" transfer-ownership="none">
          <doc xml:space="preserve">a #GstMemory</doc>
          <type name="Gst.Memory" c:type="GstMemory*"/>
        </parameter>
      </parameters>
    </function>
    <function name="query_add_allocation_dmabuf_meta"
              c:identifier="gst_query_add_allocation_dmabuf_meta">
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="query" transfer-ownership="none">
          <type name="Gst.Query" c:type="GstQuery*"/>
        </parameter>
        <parameter name="drm_modifier" transfer-ownership="none">
          <type name="guint64" c:type="guint64"/>
        </parameter>
      </parameters>
    </function>
  </namespace>
</repository>
